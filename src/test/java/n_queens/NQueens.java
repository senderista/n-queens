/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package n_queens;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class NQueensTest {
    /**
     * Validates a proposed solution for the extended N-Queens problem using the same logic as the class under test.
     */
    private static boolean validateSolution(int[] colPosInRow) {
        for (int row : colPosInRow) {
            if (!NQueens.validatePosition(colPosInRow, row, colPosInRow[row])) {
                return false;
            }
        }
        return true;
    }

    /**
     * Verifies that we find solutions for dimensions with known solutions for the extended N-Queens problem.
     */
    @Test void nQueensHasSolution() {
        final int[] hasSolutionSizes = {0, 1, 4, 8};
        for (int n : hasSolutionSizes) {
            NQueens classUnderTest = new NQueens(n);
            assertTrue(classUnderTest.findSolution());
        }
    }

    /**
     * Verifies that we fail to find solutions for dimensions where no solutions exist for the extended N-Queens problem.
     */
    @Test void nQueensHasNoSolution() {
        final int[] hasNoSolutionSizes = {2, 3, 5, 6, 7};
        for (int n : hasNoSolutionSizes) {
            NQueens classUnderTest = new NQueens(n);
            assertFalse(classUnderTest.findSolution());
        }
    }

    /**
     * Verifies that a valid solution for the extended N-Queens problem
     * is accepted by our internal logic.
     */
    @Test void nQueensExtendedSolutionIsValid() {
        final int[] colPosInRow = {1, 3, 0, 2};
        assertTrue(validateSolution(colPosInRow));
    }

    /**
     * Verifies that an invalid solution for the extended N-Queens problem
     * is rejected by our internal logic.
     */
    @Test void nQueensExtendedSolutionIsInvalid() {
        final int[] colPosInRow = {0, 3, 0, 2};
        assertFalse(validateSolution(colPosInRow));
    }

    /**
     * Verifies that a valid solution for the basic N-Queens problem
     * is an invalid solution for our extended version.
     */
    @Test void nQueensBasicSolutionIsInvalidExtendedSolution() {
        final int[] colPosInRow = {0, 2, 4, 1, 3};
        assertFalse(validateSolution(colPosInRow));
    }
}
